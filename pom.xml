<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- Define project parent, so that we do not need to define versions while 
		declaring spring-boot dependecies/plugins -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.2.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.example.spring.boot.web</groupId>
	<artifactId>spring-boot-web-app</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>spring-boot-web-app</name>
	<description>Demo project for Spring Boot. Project covers spring boot features on top of Spring.</description>

	<properties>
		<java.version>11</java.version>
	</properties>

	<dependencies>
		<!-- Only one dependency required to support and configure (auto) JPA, 
			it transitively fetch hibernate-core as a default JPA implementation -->
		<!-- It takes version from parent project -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-jdbc</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Only one starter dependency required for web support, it pulls, web, 
			MVC, jackson, tomcat, validation-api -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-validation</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- We need to explicitly define which database we want to use, and this 
			is not part of JPA starter and also does not make sense there -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- If we want to override version of transitive depedency in any starter 
			dependency, This how we can override transitive dependency in spring-boot-starter-web -->
		<!-- Maven always favors the closest dependency, meaning that because you’ve 
			expressed this dependency in your project’s build, it will be favored over 
			the one that’s transi- tively referred to by another dependency -->
		<!-- We should override starter transitive dependency version in critical 
			cases only. Because current versions in starter are well test to match version 
			of others -->
		<!-- <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> 
			<version>2.10.0</version> </dependency> -->

	</dependencies>

	<build>
		<plugins>
			<!-- This plugin allows us to run spring boot application with single 
				goal (run) and package application as a war/jar -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!-- We can define configurations like main-class here -->
			</plugin>
		</plugins>
	</build>

</project>
